#include "List.h"

struct list
{
  int field; 
  struct list *next; 
  struct list *prev; 
}

struct list * init(float a) 
{
  struct list *lst;
  lst = (struct list*)malloc(sizeof(struct list));
  lst->field = a;
  lst->next = NULL; 
  lst->prev = NULL; 
  return(lst);
}

struct list * one(list *lst, float a)  
{
  struct list *one;
  one = (struct list*)malloc(sizeof(struct list));
  one->field = a;
  one->next = lst; 
  one->prev = NULL; 
  return(lst);
}

struct list * addelem(list *lst, float number)
{
  struct list *temp, *p;
  temp = (struct list*)malloc(sizeof(list));
  p = lst->next; 
  lst->next = temp; 
  temp->field = number; 
  temp->next = p; 
  temp->prev = lst; 
  if (p != NULL)
    p->prev = temp;
  return(temp);
}

struct list * deletelem(list *lst)
{
  struct list *prev, *next;
  prev = lst->prev; 
  next = lst->next; 
  if (prev != NULL)
    prev->next = lst->next; 
  if (next != NULL)
    next->prev = lst->prev; 
  free(lst); 
  return(prev);
}

void listprint(list *lst)
{
  struct list *p;
  p = lst;
  do {
    printf("%d ", p->field); 
    p = p->next; 
  } while (p != NULL); 
}
